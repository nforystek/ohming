Note: Before you proceed just know you will be loosing what you purchase by programming, or even flashing your ESP-01 Module, relevent to this project.  AT YOUR OWN RISK

I am unable to get ESP-01's programmed by factory default, it is very difficult to use the firmware due to the requirements of serial com that your Arduio must adhere to therefore canceling debug or other uses for serial com on the Arduino in many ways when your prototyping, that is hard to do.  Pass-through, SoftwareSerial and HardwareSerial are a whole another world of attempting to operate these, but luckily I did a ton of searching and their not so bad, each time I buys some, I've found different ways then the last to get it working, so here is the easiest in my opinion, research completed.

First off, about hooking up the hardware; the ESP I find does best when hooked to the Arduino VIN, while a pwer is also, and not too much.  In the case of this drone, 7.4v I believe from lithium batteries is driven to the Arduino which hogs most of it, and the ESP then takes the exact amount minimum it needs.  The 5v or 3.3v pwoer sources never seem to work well for me, with resistors or not.  The only priority is ensuring your Ardino will be using majority of what goes into the VIN.

Extensive firmware testing and searching between expressif, NodeNCU, Thinker and possibly others, left me with a slim find in one Thinker firmware, that with out first applying to newly factory ESP-01, there is not programming only COM with the AT commands, and they don't come with the PDF to know the version in Amazon or AliExpress.  The reason for this anomilie I think is due to the chip has a webfront end interface that self flashes small bits of proprietary code you can use for very basic needs, with a default preboot settings, but not all the ESP-01 have the same AT command base, using the AT commands from Arduio is difficult to say the least.  Coming with they flash themselves via firmware that is flashable, I think the state of chaos is well enough that using these you probably do write firmware as it is very powerful in actual network rich features even if the AT commands aren't, with Arduino developed code.  In all that is three possible ways to use the ESP-01 chip, (via web interface, AT commands, or Arduino Programming) that are capable of hosting a encrypted WiFi network, being a client of an encrypted network or both.  No other firmware has been as compatable somehow even when your overwriting then this specific build that I included all with the application I also found of three total, that works best in my opinion.  I've had these come with cloud capability that I never figured out how actually it works, but it seems that would mean it remote connects to an arbitrator for whatever reason and that is a bit unsettling in the question of effeciency in design needs that require utmost speed you could acheive before the wire, on just the hardware.  The wqeb interfface I found cumbersome and slow and did not appear to be functioning as intended so I continued on seeking programming ways with Arduino IDE.  Oh, I should add too these are a little difficult to power.  I am not sure of the actaul voltage as this project gets lucky by the Arduino using as much as it needs and needs more, so when the ESP is hooked directly to the batteries, it only takes what it needs and powers then perfectly.  Other projects I have blown these and they are sensitive to the touch of human static when not pwoered correctly and should not be touched in operation obviously.  The drone project specifically is finished with the ESP development to the best of my projection, using a basic broadcast pair that connect up and stream controller commands to the drone, dropping some to keep it responzive as real time as possible.

You'll need to get the USB modlule for the ESP-01, and I've had USB to TTL types in the past that work well too, but I had to build a circuit with both a flash and reset button and that is daunting, this one a simple jumper was the only hardware modification needed and it is displayed in the picture I included.

All you need to do, is install that jumper as shown on the USB module picture in this folder, plug the ESP-01 into the USB Module, the USB Module into the computer, and run the EXE tool in the zip (extracting it first, it will have subfolders and files), set the COM port to your corresponding port and click the START button.  You'll get the MAC addresses wich are a good thing to write down (when flashing them with the Arduino IDE, the Code for the Drone project requires the AP Mac address entered manually).  When the flashing says Finish, then you can use the Arduino IDE to flash code to the ESP-01 module. (you may have to reset the ESP-01 by unpulgging and plugging it back in, sometimes it spews garbage text just random incoming when connecting to the com, unless it is reset).

If that still doesn't help, these are the versions of Arduino, boards and where to get them that I'm using:

Arduino 1.8.9 for Windows

File->Preferences->Additional Boards Manager URLs:
https://github.com/esp8266/Arduino/releases/download/2.4.0-rc2/package_esp8266com_index.json,https://dl.espressif.com/dl/package_esp32_index.json

Tools->Board:->Boards Manager...
esp8266 by ESP8266 Community version 2.2.0

Tools->Board:"Generic ESP8266 Module"